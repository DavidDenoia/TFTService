<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Bienvenida1.1" xml:space="preserve">
    <value>Este conversor puede convertir números a letras en cardinal, números en letras ordinal, números en letras fraccionario o partitivo,</value>
  </data>
  <data name="Bienvenida1.2" xml:space="preserve">
    <value>multiplicativo, decimal, romano, colectivo, número de sílabas, nombre de polígonos y poliedros, edades y nacido</value>
  </data>
  <data name="Bienvenida1.3" xml:space="preserve">
    <value>     El conversor ofrece información morfológica, ortográfica y gramatical de cada uno de los números convertidos a letras. </value>
  </data>
  <data name="Bienvenida1.4" xml:space="preserve">
    <value>Además, se incluyen ejemplos que ayudan a la comprensión y buen uso.</value>
  </data>
  <data name="Bienvenida2.1" xml:space="preserve">
    <value>Escriba un número sin coma ni punto para los miles o millones. Los miles o millones se pueden separar con un espacio en blanco.</value>
  </data>
  <data name="Bienvenida2.2" xml:space="preserve">
    <value>En los decimales puede usar un punto o una coma. Para escribir fracciones use la barra inclinada "/". </value>
  </data>
  <data name="Bienvenida2.3" xml:space="preserve">
    <value> Para escribir en notación científica use la E sin espacios. Si es un número romano, escriba en mayúscula todos sus símbolos.</value>
  </data>
  <data name="ConSimbolo" xml:space="preserve">
    <value>con el símbolo</value>
  </data>
  <data name="Dolar" xml:space="preserve">
    <value>dólares</value>
  </data>
  <data name="ErrorLinea1" xml:space="preserve">
    <value>Los símbolos de monedas (£, ¥, etc.) no están admitidos para este idioma.</value>
  </data>
  <data name="ErrorLinea2" xml:space="preserve">
    <value>Puede que el número, el exponente o la parte decimal sea demasiado grande.</value>
  </data>
  <data name="ErrorLinea3" xml:space="preserve">
    <value>NO escriba el número con letras, excepto si es un número romano.</value>
  </data>
  <data name="ErrorLinea4" xml:space="preserve">
    <value>Escriba un número sin coma ni punto para los miles o millones:</value>
  </data>
  <data name="ErrorLinea5" xml:space="preserve">
    <value>Los miles o millones se pueden separar con un espacio en blanco: </value>
  </data>
  <data name="ErrorLinea6" xml:space="preserve">
    <value>En los decimales puede usar un punto o una coma:</value>
  </data>
  <data name="ErrorLinea7" xml:space="preserve">
    <value>Para escribir fracciones use la barra:</value>
  </data>
  <data name="ErrorLinea8.1" xml:space="preserve">
    <value>Para escribir en notación científica use la</value>
  </data>
  <data name="ErrorLinea8.2" xml:space="preserve">
    <value>sin espacios:</value>
  </data>
  <data name="ErrorLinea9" xml:space="preserve">
    <value>Si es un número romano, escríbalo en mayúscula:</value>
  </data>
  <data name="EscribaCantidades" xml:space="preserve">
    <value>Escriba cantidades en</value>
  </data>
  <data name="FormatosAdmitidos" xml:space="preserve">
    <value>Los formatos admitidos para el catalán son los siguientes:</value>
  </data>
  <data name="Inicio" xml:space="preserve">
    <value>Inicio</value>
  </data>
  <data name="Nosotros" xml:space="preserve">
    <value>Nosotros</value>
  </data>
  <data name="PlaceHolderNumero" xml:space="preserve">
    <value>Escriba un número con cifras o un número romano</value>
  </data>
  <data name="PruebaEjemplos" xml:space="preserve">
    <value>Prueba los ejemplos</value>
  </data>
  <data name="TituloPrincipal" xml:space="preserve">
    <value> Números a letras</value>
  </data>
</root>